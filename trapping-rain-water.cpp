/*
üåßÔ∏è Two Pointers Water Trapping - Complete Logic
‡§π‡§Æ ‡§¶‡•ã pointers use ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç - left (array ‡§ï‡•Ä ‡§∂‡•Å‡§∞‡•Å‡§Ü‡§§ ‡§∏‡•á) ‡§î‡§∞ 
right (array ‡§ï‡•á ‡§Ö‡§Ç‡§§ ‡§∏‡•á) - ‡§ï‡•ç‡§Ø‡•ã‡§Ç‡§ï‡§ø water trapping ‡§ï‡§æ fundamental 
rule ‡§Ø‡§π ‡§π‡•à ‡§ï‡§ø ‡§ï‡§ø‡§∏‡•Ä ‡§≠‡•Ä position ‡§™‡§∞ ‡§™‡§æ‡§®‡•Ä ‡§ï‡§æ level ‡§â‡§∏‡§ï‡•á left ‡§î‡§∞ 
right ‡§ï‡•á maximum heights ‡§ï‡•á minimum ‡§ï‡•á ‡§¨‡§∞‡§æ‡§¨‡§∞ ‡§π‡•ã‡§§‡§æ ‡§π‡•à‡•§ ‡§ú‡§¨ ‡§π‡§Æ‡§æ‡§∞‡•á ‡§™‡§æ‡§∏ 
leftMax < rightMax ‡§π‡•ã‡§§‡§æ ‡§π‡•à, ‡§§‡•ã ‡§π‡§Æ ‡§ú‡§æ‡§®‡§§‡•á ‡§π‡•à‡§Ç ‡§ï‡§ø left pointer ‡§ï‡•á current 
position ‡§™‡§∞ water level leftMax ‡§∏‡•á limited ‡§π‡•à (‡§ï‡•ç‡§Ø‡•ã‡§Ç‡§ï‡§ø right side ‡§Æ‡•á‡§Ç ‡§™‡§π‡§≤‡•á ‡§∏‡•á 
‡§π‡•Ä ‡§¨‡§°‡§º‡•Ä height ‡§π‡•à), ‡§á‡§∏‡§≤‡§ø‡§è ‡§π‡§Æ safely leftMax - height[left] ‡§ï‡§æ water trap 
‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç ‡§î‡§∞ left pointer ‡§ï‡•ã ‡§Ü‡§ó‡•á ‡§¨‡§¢‡§º‡§æ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§ Opposite case ‡§Æ‡•á‡§Ç 
‡§ú‡§¨ rightMax < leftMax ‡§π‡•ã‡§§‡§æ ‡§π‡•à, ‡§§‡•ã right side water level ‡§ï‡•ã limit ‡§ï‡§∞ ‡§∞‡§π‡•Ä ‡§π‡•à, 
‡§á‡§∏‡§≤‡§ø‡§è ‡§π‡§Æ right pointer ‡§ï‡•ã ‡§™‡•Ä‡§õ‡•á ‡§ï‡•Ä ‡§§‡§∞‡§´ move ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç‡•§ ‡§Ø‡§π approach efficient ‡§π‡•à
‡§ï‡•ç‡§Ø‡•ã‡§Ç‡§ï‡§ø ‡§π‡§Æ ‡§π‡§Æ‡•á‡§∂‡§æ shorter boundary ‡§µ‡§æ‡§≤‡•Ä side ‡§∏‡•á move ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç - ‡§ú‡•ã water level ‡§ï‡•ã
actually limit ‡§ï‡§∞ ‡§∞‡§π‡•Ä ‡§π‡•à - ‡§î‡§∞ ‡§á‡§∏‡§∏‡•á ‡§π‡§Æ‡•á‡§Ç guarantee ‡§Æ‡§ø‡§≤‡§§‡•Ä ‡§π‡•à ‡§ï‡§ø ‡§π‡§Æ ‡§∏‡§≠‡•Ä possible 
water ‡§ï‡•ã accurately calculate ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç ‡§¨‡§ø‡§®‡§æ ‡§ï‡•ã‡§à position ‡§ï‡•ã miss ‡§ï‡§ø‡§è‡•§ Key
insight ‡§Ø‡§π ‡§π‡•à ‡§ï‡§ø shorter side ‡§π‡§Æ‡•á‡§∂‡§æ water level determine ‡§ï‡§∞‡§§‡•Ä ‡§π‡•à,
‡§á‡§∏‡§≤‡§ø‡§è ‡§â‡§∏‡•Ä direction ‡§∏‡•á pointer move ‡§ï‡§∞‡§®‡§æ logical ‡§π‡•à‡•§
*/
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;

class Solution {
public:
    int trap(vector<int>& height) {
        // Step 1: Initialize two pointers and variables
        int left=0;
        int right=height.size()-1;
        int leftMax=0;
        int rightMax=0;
        int totalWater=0;           
        
        // Step 2: Main two pointers loop
        while (left<right)
        {
            /* code */
            if (leftMax<rightMax)
            {
                /* code */
                if(height[left]<leftMax)
                {             
                    totalWater=totalWater+(leftMax-height[left]);             
                }else
                {
                    leftMax=height[left];
                }
                left++;
            }else
            {
                if(height[right]<rightMax)
                {
                    totalWater=totalWater+(rightMax-height[right]);
                }else
                {
                    rightMax=height[right];
                }
                right--;
            }
        }     
        return totalWater;
    }
};

int main() {
    Solution sol;
    
    // Test Case 1
    vector<int> height1 = {0,1,0,2,1,0,1,3,2,1,2,1};
    cout << "Test 1: height = [0,1,0,2,1,0,1,3,2,1,2,1]" << endl;
    cout << "Output: " << sol.trap(height1) << endl;
    cout << "Expected: 6" << endl << endl;
    
    // Test Case 2  
    vector<int> height2 = {4,2,0,3,2,5};
    cout << "Test 2: height = [4,2,0,3,2,5]" << endl;
    cout << "Output: " << sol.trap(height2) << endl;
    cout << "Expected: 9" << endl << endl;
    
    // Test Case 3 - Simple case
    vector<int> height3 = {3,0,2,0,4};
    cout << "Test 3: height = [3,0,2,0,4]" << endl;
    cout << "Output: " << sol.trap(height3) << endl;
    cout << "Expected: 7" << endl;
    
    return 0;
}
